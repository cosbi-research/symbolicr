% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/comb.search.R
\name{comb.search}
\alias{comb.search}
\title{Explore given combinations of formula terms}
\usage{
comb.search(
  complete.X.df,
  y,
  combinations,
  K = 7,
  N = 10,
  seed = NULL,
  transformations = list(log10 = function(rdf, x, z) {
     log10(0.1 + abs(z) + x)
 },
    inv = function(rdf, x, z) {
     1/(0.1 + abs(z) + x)
 }),
  custom.abs.mins = list(),
  cv.norm = F
)
}
\arguments{
\item{complete.X.df}{The dataset that contains the base variables the formula is composed of (column-wise)}

\item{y}{The independent variable to be predicted with the formula}

\item{combinations}{A data.frame of combinations of shape (num.combinations, formula.len)}

\item{K}{The number of parts the dataset is split into for K-fold cross-validation.}

\item{N}{The number of times the K-fold validation is repeated, shuffling the dataset row orders before each time.}

\item{seed}{An (optional) seed for deterministic run}

\item{transformations}{A list of potentially non-linear transformations that can be applied on top of the squares. Ex. \verb{order 0, transformation=log10 = log10.a}}

\item{custom.abs.mins}{A list of user-defined minimum values for dataset columns.}

\item{cv.norm}{Normalize regressors after train-validation split in inner cross-validation loop.}
}
\value{
A data.frame of formulas and the corresponding cross-validation performance measures (R-squared, absolute relative error, max cooks distance). See also \code{empty.sample}.
}
\description{
Given a set of formulas, this function systematically evaluates
all combinations of formula terms, of a given length.
}
\examples{
\dontrun{
base.filepath <- paste0('regression/regression',type,'.exploration.l',formula.len,'.rData')
res <- readRDS(base.filepath)
complete.regressors <- regressors.names(regressors.df, n.squares, transformations)
# compute combinations up to length formula.len
regressors.list <- lapply(seq(formula.len), function(x) complete.regressors)
combinations <- RcppAlgos::comboGrid(regressors.list, repetition = F)
combinations <- apply(combinations, MARGIN=1, FUN=function(row){
  paste(row, collapse=",")
})
names(combinations)<-NULL
# get missing formulas
missing <- setdiff(combinations, res$vars)
# compute exaustively all missing formulas
res.new <- comb.search(regressors.df, l.Fn,
                       # data.frame of n.missing.values x formula.len
                       combinations=t(as.data.frame(strsplit(missing,",",fixed=T))),
                       K=K, N=N, seed=seed,
                       transformations=transformations, custom.abs.mins=list(), cv.norm=T)
res <- rbind(res, res.new)
saveRDS(res, base.filepath)
}
}
